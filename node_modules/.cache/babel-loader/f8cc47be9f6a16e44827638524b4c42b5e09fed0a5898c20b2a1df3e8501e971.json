{"ast":null,"code":"var _jsxFileName = \"/home/dylan/Documents/Projects/flash-cards/src/components/Dash/Dash.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Dash.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dash() {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [rows, setRows] = useState(3); // Initial number of rows\n\n  useEffect(() => {\n    // Function to calculate and set the number of rows based on content\n    const calculateRowCount = () => {\n      const lineHeight = 16; // Adjust this value based on your font and styling\n      const minHeight = 32; // Minimum height for one row\n      const textarea = document.getElementById('auto-resize-textarea');\n      const lines = textarea.value.split('\\n').length;\n      const rowCount = Math.max(minHeight / lineHeight, lines);\n      setRows(rowCount);\n    };\n    calculateRowCount();\n\n    // Event listener to recalculate rows when the content changes\n    window.addEventListener('input', calculateRowCount);\n    return () => {\n      // Remove the event listener when the component unmounts\n      window.removeEventListener('input', calculateRowCount);\n    };\n  }, []);\n  const handleInputChange = e => {\n    setInputText(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash\",\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"auto-resize-textarea\",\n      rows: rows,\n      placeholder: \"Type text here...\",\n      value: inputText,\n      onChange: handleInputChange,\n      className: \"textarea\",\n      style: {\n        overflowY: 'hidden'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(Dash, \"0Fs+6rZ3KCBO97LwJcFZVDE53gA=\");\n_c = Dash;\nexport default Dash;\nvar _c;\n$RefreshReg$(_c, \"Dash\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Dash","_s","inputText","setInputText","rows","setRows","useEffect","calculateRowCount","lineHeight","minHeight","textarea","document","getElementById","lines","value","split","length","rowCount","Math","max","window","addEventListener","removeEventListener","handleInputChange","e","target","className","children","id","placeholder","onChange","style","overflowY","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dylan/Documents/Projects/flash-cards/src/components/Dash/Dash.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport './Dash.css';\n\nfunction Dash() {\n  const [inputText, setInputText] = useState<string>('');\n  const [rows, setRows] = useState<number>(3); // Initial number of rows\n\n  useEffect(() => {\n    // Function to calculate and set the number of rows based on content\n    const calculateRowCount = () => {\n      const lineHeight = 16; // Adjust this value based on your font and styling\n      const minHeight = 32; // Minimum height for one row\n      const textarea = document.getElementById('auto-resize-textarea') as HTMLTextAreaElement;\n      const lines = textarea.value.split('\\n').length;\n      const rowCount = Math.max(minHeight / lineHeight, lines);\n      setRows(rowCount);\n    };\n\n    calculateRowCount();\n\n    // Event listener to recalculate rows when the content changes\n    window.addEventListener('input', calculateRowCount);\n\n    return () => {\n      // Remove the event listener when the component unmounts\n      window.removeEventListener('input', calculateRowCount);\n    };\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputText(e.target.value);\n  };\n\n  return (\n    <div className=\"dash\">\n      <textarea\n        id=\"auto-resize-textarea\"\n        rows={rows}\n        placeholder=\"Type text here...\"\n        value={inputText}\n        onChange={handleInputChange}\n        className=\"textarea\"\n        style={{ overflowY: 'hidden' }}\n      ></textarea>\n    </div>\n  );\n}\n\nexport default Dash;"],"mappings":";;AAAA,OAAOA,KAAK,IAAYC,QAAQ,QAAQ,OAAO;AAC/C,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAS,EAAE,CAAC;EACtD,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAS,CAAC,CAAC,CAAC,CAAC;;EAE7CS,SAAS,CAAC,MAAM;IACd;IACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;MACvB,MAAMC,SAAS,GAAG,EAAE,CAAC,CAAC;MACtB,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,cAAc,CAAC,sBAAsB,CAAwB;MACvF,MAAMC,KAAK,GAAGH,QAAQ,CAACI,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM;MAC/C,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACV,SAAS,GAAGD,UAAU,EAAEK,KAAK,CAAC;MACxDR,OAAO,CAACY,QAAQ,CAAC;IACnB,CAAC;IAEDV,iBAAiB,CAAC,CAAC;;IAEnB;IACAa,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEd,iBAAiB,CAAC;IAEnD,OAAO,MAAM;MACX;MACAa,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEf,iBAAiB,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgB,iBAAiB,GAAIC,CAAyC,IAAK;IACvErB,YAAY,CAACqB,CAAC,CAACC,MAAM,CAACX,KAAK,CAAC;EAC9B,CAAC;EAED,oBACEf,OAAA;IAAK2B,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnB5B,OAAA;MACE6B,EAAE,EAAC,sBAAsB;MACzBxB,IAAI,EAAEA,IAAK;MACXyB,WAAW,EAAC,mBAAmB;MAC/Bf,KAAK,EAAEZ,SAAU;MACjB4B,QAAQ,EAAEP,iBAAkB;MAC5BG,SAAS,EAAC,UAAU;MACpBK,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACnC,EAAA,CA3CQD,IAAI;AAAAqC,EAAA,GAAJrC,IAAI;AA6Cb,eAAeA,IAAI;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}